{"version":3,"sources":["ColorChange.js","serviceWorker.js","index.js"],"names":["ColorChange","props","textColorChange","e","value","target","test","setState","state","textColor","bgColorChange","bgColor","localStorage","getItem","JSON","parse","setItem","stringify","this","style","backgroundColor","color","type","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAEqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAURC,gBAAkB,SAACC,GAAO,IACdC,EAAUD,EAAEE,OAAZD,MACO,kBACJE,KAAKF,IACZ,EAAKG,UAAS,SAAAC,GAAK,MAAK,CACpBC,UAAWL,OAhBJ,EAqBnBM,cAAgB,SAACP,GAAO,IACZC,EAAUD,EAAEE,OAAZD,MACO,kBACJE,KAAKF,IACZ,EAAKG,UAAS,SAAAC,GAAK,MAAK,CACpBG,QAASP,OAvBnB,EAAKI,MAAQI,aAAaC,QAAQ,UACtBC,KAAKC,MAAMH,aAAaC,QAAQ,WAChC,CACEJ,UAAW,GACXE,QAAS,IAPN,E,sEA+BT,IAAD,OACLC,aAAaI,QAAQ,SAAUF,KAAKG,UAAUC,KAAKV,QAD9C,MAE0BU,KAAKV,MAA5BC,EAFH,EAEGA,UAAWE,EAFd,EAEcA,QAEnB,OACI,6BACI,uBAAGQ,MAAO,CAACC,gBAAiBT,EAASU,MAAOZ,IAA5C,oDAGN,uBAAGU,MAAO,CAACC,gBAAiBT,EAASU,MAAOZ,IAA5C,oDAGM,2BAAOa,KAAK,OAAOC,SAAU,SAAApB,GAAC,OAAI,EAAKD,gBAAgBC,IAAIqB,YAAc,wBAC/E,2BAAOF,KAAK,OAAOC,SAAU,SAAApB,GAAC,OAAI,EAAKO,cAAcP,IAAIqB,YAAc,mC,GA7CxCC,IAAMC,WCU3BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD8HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.06e98e3b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class ColorChange extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = localStorage.getItem('colors') \r\n                ? JSON.parse(localStorage.getItem('colors')) \r\n                : {\r\n                    textColor: \"\",\r\n                    bgColor: \"\",\r\n                };\r\n    }\r\n\r\n    textColorChange = (e) => {\r\n        const { value } = e.target;\r\n        const regexp = /^#[0-9a-fA-F]+$/;\r\n        if (regexp.test(value)) {\r\n            this.setState(state => ({\r\n                textColor: value\r\n            }));\r\n        };\r\n    }\r\n\r\n    bgColorChange = (e) => {\r\n        const { value } = e.target;\r\n        const regexp = /^#[0-9a-fA-F]+$/;\r\n        if (regexp.test(value)) {\r\n            this.setState(state => ({\r\n                bgColor: value\r\n            }));\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        localStorage.setItem('colors', JSON.stringify(this.state));\r\n        const { textColor, bgColor } = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <p style={{backgroundColor: bgColor, color: textColor}}>\r\n                    Lorem Ipsum is simply dummy text of the printing\r\n                </p>\r\n\t\t        <p style={{backgroundColor: bgColor, color: textColor}}>\r\n                    Lorem Ipsum is simply dummy text of the printing\r\n                </p>\r\n                <input type=\"text\" onChange={e => this.textColorChange(e)} placeholder = 'text color: #000000'/>\r\n\t\t        <input type=\"text\" onChange={e => this.bgColorChange(e)} placeholder = 'background color: #ffffff'/>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ColorChange from \"./ColorChange\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ColorChange />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}